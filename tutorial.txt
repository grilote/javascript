Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados
_______________________________________________________________________________

MANDAMENTO DA programação

1) UX (Use experience) - desenvolver sempre pensando na experiencia do usuário.

Dica de video: http://youtu.be/Z1GNW_woXI0?si=rT8A-7amLsIxuokW

2) Usar o minimo posível de código (variáveis), operadores, comparadores, estuturas de controle etc) para resolver o problema (lembrar do marcapasso)

3)Entender o problema. Não adianta sentar na frente do computador se você não sabe como resolver o probelma.
"algoritmo" (receita do bolo")
conceito: 
            variáveis
entrada - processamento - saínpmda
__________________________________________________________________________________

GIT e GITHUB
Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositório local)
git add . (adiciona ao repositório local)
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (sincroniza as informações do repositório no PC)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

____________________________________________________
Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição da classe / função
    @author Professor José de Assis
    @version 1.0
*/

2) Nomes de arquivos, variáveis, funções, classes, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
- Só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo (camel case) - Usar uma letra maiúscula na segunda palavra
Exemplo
nomecliente -> nomeCliente


____________________________________________________
Comandos básicos do MS-DOS
cls -> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretório
cd .. -> voltar par ao diretório anterior

____________________________________________________
Node - Plataforma que permite a execução do JavaScript
fora do navegador (browser)
https://nodejs.org/  (baixar sempre a versão LTS)

Comandos básicos:
node -v (versão do node)

Gerenciador de pacote para o node:
npm está relacionado a pasta do projeto ou seja os pacotes são instalados na raiz do projeto e não no sistema operacional

npm -v (versão do npm)
npm ls (listar pacotes instalados)
npm i nome_do_pacote (instalar um pacote)
npm init (iniciar um novo projeto javaScript)

npm init (iniciar um novo projeto JavaScript)
   |____ package.json

json (JavaScript Object Notation)

____________________________________________________
Variáveis e constante:

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.


Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.


Nas linguagens de programação as variáveis são tipadas ou dinamicamente tipadas

Existem 3 tipos de variáveis:

String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false

ATENCAO: No js uma variavel pode ser criada usando let ou var

var (obsoleto e insegura), usar sempre let
_____________________________________________________
Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> criar(declarar) uma constante
let -> criar(declarar) uma variável
typeof() -> verificar o tipo de variável

_______________________________________________________________________________

Estrutura de controle
-condicionais
-laços de repetições
Estruta de controle condicionais

if (condição){
    //condição verdadeira
}
// nao disperdiça como so o if
if (condição){
    //condição verdadeira
} else {
    //condição falsa
}

Observações:
1) Uma condição nunca pode ser verdadeira e falsa simultaniamente.
2) No uso do if-else sempre uma das condições será processada.

if (condição 1){
    //condição 1 verdadeira
} else if (condição 2){
    //condição 2 verdadeira
} else {
    //condição falta
}

Obs: Nesta estrutra o else é opcional, porém se indicado caso não nenhuma condição for verdeira ele obrigatóriamente executará o que estiver no else.

switch case (uso de variável numérico(número inteiro))

switch (variavel){
    caso1 :
      //código caso o valor da variável seja 1 break
    caso2 : 
      //codigo caso o valor da variável seja 2 break
    default:
      // opcional, o código será executado se nenhum caso for defiido
      definido
      break  
}
